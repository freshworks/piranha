<% 
  mailbox_data = get_mailbox_params # contains oauth values for mailbox
  mailbox_presence = mailbox_data.present?
  imap_mailbox = @email_config.imap_mailbox
  smtp_mailbox = @email_config.smtp_mailbox
  imap_authentication = imap_mailbox.authentication
  smtp_authentication = smtp_mailbox.authentication
  imap_oauth = !imap_authentication.nil? && imap_mailbox.oauth?
  smtp_oauth = !smtp_authentication.nil? && smtp_mailbox.oauth?
  is_google_oauth = smtp_authentication.eql?(MailboxConstants::GOOGLE_AUTHENTICATION_TYPE) || imap_authentication.eql?(MailboxConstants::GOOGLE_AUTHENTICATION_TYPE)
  is_microsoft_oauth = smtp_authentication.eql?(MailboxConstants::MICROSOFT_AUTHENTICATION_TYPE) || imap_authentication.eql?(MailboxConstants::MICROSOFT_AUTHENTICATION_TYPE)
%>
<div class="email-config">
  <ul class="unstyled row-fluid">
    <li class="control-group">
      <label class="control-label" ><%= t(fetch_mailbox_translation_key('email_configs.name')) %></label>
        <div class="controls">
          <%= f.text_field :name, :class => "text input-xxlarge" %>
          <div class="muted"><%= t(fetch_mailbox_translation_key('email_configs.name_info_msg')) %> </div>
        </div>
    </li>
    
    <li class="control-group">
        <label class="control-label" ><%=t('email_configs.reply_email')%><span class="required_star">*</span></label>
        <div class="controls">
          <%= f.text_field :reply_email, :class => "required email muted text input-xxlarge admin-page", :id => "reply_to_id" %>
          <div class="muted"><%= t('email_configs.info7') %> </div>
          <div class="dkim-warning hide">
            <div class="fs-banner error mb24">
              <div class="banner-content"><%= t(fetch_mailbox_translation_key('email_configs.default_mailbox_public_domain_error')).html_safe %></div>
            </div>
          </div>
        </div>
        <% if current_account.custom_mailbox_enhancements? %>
          <%
            email_config_reply_email_error = @email_config.errors.messages[:reply_email].present?	
            email_config_base_error = @email_config.errors.messages[:base].present? 
          %>
          <% if email_config_reply_email_error || email_config_base_error %>
            <div class="duplicate-email-error">
              <% if email_config_base_error %>
                  <%= @email_config.errors.messages[:base].first %>
              <% elsif email_config_reply_email_error %>
                <%= I18n.t('js_translations.mailbox.common.username_used') %>
                <button
                  id="dup-email-error-info-button" 
                  class="review-button"
                  title=""
                  data-backdrop="static"
                  data-target="#duplicate-email-error"
                  data-template-footer=""
                  data-template-header="<div class='modal-header'><i class='ficon ficon-alert'></i><h3><%=I18n.t('js_translations.mailbox.mailbox_errors.duplicate_username_error.title')%></h3></div>"
                  data-classes="side-modal"
                  data-show-close="true"
                  href="#" 
                  rel="freshdialog" 
                  data-reset-on-close="true"
                  data-classes="side-modal"
                  data-show-close="true"
                  rel="freshdialog"> <%= t("support.changes.review")%>
                </button>
              <% end %>
            </div>
          <% end %>
        <% end %>
    </li>

    <li class="control-group">
      <label class="control-label" ><%=t(fetch_mailbox_translation_key('email_configs.info9'))%></label>
      <div class="controls">
        <%= select(:email_config, :group_id, @groups.collect { |group| [ CGI.unescapeHTML(group.name), group.id] },{:include_blank => "..."},:class =>"select2 input-xlarge") %>
        <div class="muted input-xxlarge assign-to-agent-group-info"><%=t(fetch_mailbox_translation_key('email_configs.info10'))%> </div>
      <div class="controls">
    </li>

    <%= render partial: "select_product_itil" %>

    <li class="control-group">
      <label class="control-label" ><%=t('mailbox.mail_server')%></label>
      <div class="controls row-fluid">
        <% mailbox_enabled = @email_config.smtp_mailbox && !@email_config.smtp_mailbox.new_record? %>
        <label class="radio inline span4">
          <input autocomplete='off' checked="checked" id="DisableMailbox" name="email_config[smtp_mailbox_attributes][_destroy]" type="radio" value="1" <%= 'checked="checked"' unless  mailbox_enabled %> >
          <%= t('mailbox.use_default')%>
        </label>
        <label class="radio inline">
          <input autocomplete='off' id="EnableMailbox" name="email_config[smtp_mailbox_attributes][_destroy]" type="radio" value="0" <%= 'checked="checked"' if mailbox_enabled %> >
          <%= t(fetch_mailbox_translation_key('mailbox.use_your_own'))%>
        </label>
      </div>
    </li>

    <li class="control-group">
      <div id="FreshdeskMailbox">
        <label class="control-label"> <%=t('email_configs.info8')%> </label>
        <div class="controls">
          <%= content_tag(:div, @email_config.to_email, :id => "div_reply_email", :class =>"highlight-textbox-info input-xxlarge" ) %>
          <%= f.hidden_field :to_email, :id => "hidden_reply_to" %>
          <a target="_blank" title="Learn how to configure your support email" href="https://support.freshservice.com/support/solutions/articles/154123-setting-up-your-support-email"><%= t('email_configs.solution_link') %></a>
        </div>
        <%= render(:partial => "dkim_info")  %>
      </div>
      <div class="hide" class="CustomMailbox" id="CustomMailbox">
        <%= render partial: "email_system", :locals => {:new_form => new_form}  %>
      </div>
		</div>
	</li>
</ul>
</div>
<% if current_account.custom_mailbox_enhancements? %>
  <div id="duplicate-email-error" class="hide"></div>
<% end %>

<div class="align-right itil-hide">
  <% unless new_form %>
    <%= link_to(t('remove'), resource_locator('admin_email_config', :index, id: @email_config), method: 'delete', data: { confirm: t('email_configs.remove_msg') }, class: "btn floatl" ) unless @email_config.primary_role %>
  <% end %>
	<%= link_to(t('cancel'), resource_locator('admin_email_configs', :index), :class => "btn", :id => "email-form-cancel" )  %>
	<%= f.submit t('save'), :class => "btn btn-primary"  %>
</div>

<%= javascript_tag do%>
  jQuery(document).ready(function(){
    if(<%= current_account.custom_mailbox_enhancements? %>){
      var dupEmailErrTemplate = HBSUtils.getTemplate('email_configs/custom_mailbox_error_modal')({
        error_type:"setup_mailbox_error",
          key: "duplicate_username_error",
          error_reason: true,
          next_steps: true,
      });
      jQuery("#duplicate-email-error").html(dupEmailErrTemplate);
    }
  });
  jQuery.getScript("<%= javascript_path('cdn/app/email_config.js') %>", function() {
    email_config = new EmailConfig({
      mailbox_data: <%= mailbox_data.to_json.html_safe %>,
      other_imap_fields: '<%= fields_for "email_config[imap_mailbox_attributes]", @imap_mailbox do |imap_mailbox| %> <%= escape_javascript render(:partial => 'new_imap_mailbox', :locals => { :imap_mailbox => imap_mailbox, error: true }) %> <% end %>',
      other_smtp_fields: '<%= fields_for "email_config[smtp_mailbox_attributes]", @smtp_mailbox do |smtp_mailbox| %> <%= escape_javascript render(:partial => 'new_smtp_mailbox', :locals => { :smtp_mailbox => smtp_mailbox, error: true }) %> <% end %>',
      oauth_imap_fields: '<%= fields_for "email_config[imap_mailbox_attributes]", @imap_mailbox do |imap_mailbox| %> <%= escape_javascript render(:partial => 'imap_oauth_mailbox', :locals => { imap_mailbox: imap_mailbox, mailbox_data: mailbox_presence }) %> <% end %>',
      oauth_smtp_fields: '<%= fields_for "email_config[smtp_mailbox_attributes]", @smtp_mailbox do |smtp_mailbox| %> <%= escape_javascript render(:partial => 'smtp_oauth_mailbox', :locals => { smtp_mailbox: smtp_mailbox, mailbox_data: mailbox_presence }) %> <% end %>',
      gmail_oauth_url: '<%= @gmail_app.oauth_url({account_id: current_account.id, user_id: current_user.id}, 'gmail') if @gmail_app %>',
      microsoft_oauth_url: '<%= @outlook_app.oauth_url({account_id: current_account.id, user_id: current_user.id}, 'outlook') if @outlook_app %>',
      oauth_gmail_constant: <%= MailboxConstants::SERVER_PROFILES[0].to_json.html_safe %>,
      oauth_microsoft_constant: <%= MailboxConstants::SERVER_PROFILES[1].to_json.html_safe %>,
      mailbox_class_name: '#CustomMailbox',
      smpt_err: null,
      ms_graph_api_enabled: <%= current_account.er_ms_graph_api? %>,
      oauth_microsoft_graph_constant: <%= MailboxConstants::SERVER_PROFILES[3].to_json.html_safe %>,
    });
    email_config.init();
    email_config.checkGetStartedModalPresence();
    if(<%= new_form %>){
      email_config.handleOAUTHRedirection(email_config.mailbox_data, "#CustomMailbox");
    }else{
      if(!email_config.handleOAUTHRedirection(email_config.mailbox_data, "#CustomMailbox")){
        editInitAction();
      }
    }
  });

  function editInitAction(){
    if(<%= !@new_smtp_record && is_google_oauth %>) {
      var provider = '<%= MailboxConstants::MAILBOX_SERVER_PROFILES[0][0].to_s %>';
      updateOauthMailSettings(provider);
      jQuery(".smtp_limit_alert.oauth").css("display", "flex");
    }else if(<%= !@new_smtp_record && is_microsoft_oauth %>){
      var provider = '<%= MailboxConstants::MAILBOX_SERVER_PROFILES[1][0].to_s %>';
      updateOauthMailSettings(provider);
    }else{
      email_config.updateOtherMailSettings();
    }
    // Back redirection handling
    if(<%= @new_imap_record && !@new_smtp_record %>){
      jQuery("#EnableOutgoing").prop('checked', true);
      email_config.hideIncomingMailBoxSettings();
      jQuery("#CustomMailbox #deleteFromServer").hide();
    }else{
      jQuery("#EnableBoth").prop('checked', true);
    }
  }

  function updateOauthMailSettings(provider){
    jQuery("#profileInfo").css("display", "flex");
    jQuery('#'.concat(provider)).addClass("disabled");
    jQuery("#provider").val(provider);

    updateMailboxServerDetails();

    // Updating hidden field values
    jQuery("#email_config_submit").removeClass("disabled");
  }

  // Method to dynamically append mailbox server element based on oauth checks
  function updateMailboxServerDetails(){
    if(<%= imap_oauth %>) {
      jQuery('#imap_oauth').val('true');
      jQuery('#OtherMailbox').html(email_config.oauth_imap_fields);
      // on click listeners for edit imap oauth flow
      jQuery('.edit-imap-oauth').on('click', function() {
        email_config.editMailboxSettings('#imap_oauth', '#incoming_mailbox_settings', email_config.other_imap_fields, '#outgoing_mail_settings');
        jQuery('#email_config_imap_mailbox_attributes_authentication_plain').prop('checked', true);
      });
    } else {
      jQuery('#OtherMailbox').html(email_config.other_imap_fields);
    }
    if(<%= smtp_oauth %>) {
      jQuery('#smtp_oauth').val('true');
      jQuery('#OtherMailbox').append(email_config.oauth_smtp_fields);
      // on click listeners for edit smtp oauth flow
      jQuery('.edit-smtp-oauth').on('click', function() {
        email_config.editMailboxSettings('#smtp_oauth', '#outgoing_mail_settings', email_config.other_smtp_fields, '#incoming_mailbox_settings');
        jQuery('#email_config_smtp_mailbox_attributes_authentication_plain').prop('checked', true);
      });
    } else {
      jQuery('#OtherMailbox').append(email_config.other_smtp_fields);
    }
  }
<% end %>